apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion versions.compileSdkVersion

    defaultConfig {
        applicationId "com.chrisa.cviz"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments << ["room.schemaLocation": "$projectDir/schemas".toString()]
                arguments << ['room.incremental': 'true']
            }
        }
    }

    signingConfigs {
        release {
            def keyStore = findProperty('cviz_store_file') ?: 'debug.key'
            storeFile file(keyStore)
            keyAlias findProperty('cviz_release_keyAlias') ?: 'android'
            keyPassword findProperty('cviz_release_keyPassword') ?: 'android'
            storePassword findProperty('cviz_release_storePassword') ?: 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    lintOptions {
        warningsAsErrors true
        checkDependencies true
        ignoreTestSources true
        lintConfig file("lint.xml")
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        main {
            java {
                srcDir 'src/main/java'
                srcDir 'src/external/java'
            }
        }
        test {
            java {
                srcDir 'src/test/java'
                srcDir 'src/externalTest/java'
            }
        }
    }
}

kapt {
    correctErrorTypes = true
}

dependencies {
    /* desugaring */
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${versions.desugarJdk}"

    /* kotlin */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    /* android */
    implementation "androidx.arch.core:core-runtime:${versions.archRuntime}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycleExtensions}"
    implementation "androidx.navigation:navigation-fragment-ktx:$androidx_navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$androidx_navigation"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "androidx.core:core-ktx:${versions.ktx}"
    implementation "androidx.fragment:fragment-ktx:${versions.fragment}"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerview}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.work:work-runtime-ktx:${versions.androidxWork}"
    implementation "androidx.viewpager2:viewpager2:${versions.androidxViewpager2}"

    /* rx */
    implementation "io.reactivex.rxjava3:rxjava:${versions.rxjava}"
    implementation "io.reactivex.rxjava3:rxandroid:${versions.rxandroid}"
    implementation "com.jakewharton.rxbinding4:rxbinding:${versions.rxbinding}"
    implementation "com.jakewharton.rxbinding4:rxbinding-appcompat:${versions.rxbinding}"
    implementation "com.jakewharton.rxbinding4:rxbinding-core:${versions.rxbinding}"

    /* flow */
    implementation "com.github.akarnokd:kotlin-flow-extensions:${versions.flowExtensions}"

    /* room */
    implementation "androidx.room:room-runtime:${versions.androidxRoom}"
    implementation "androidx.room:room-ktx:${versions.androidxRoom}"
    kapt "androidx.room:room-compiler:${versions.androidxRoom}"
    implementation "androidx.concurrent:concurrent-futures-ktx:1.1.0"

    /* coil */
    implementation "io.coil-kt:coil:${versions.coil}"

    /* dagger */
    implementation "com.google.dagger:dagger:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

    /* hilt */
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:${versions.androidxHilt}"
    implementation "androidx.hilt:hilt-work:${versions.androidxHilt}"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:${versions.androidxHilt}"

    /* epoxy */
    implementation "com.airbnb.android:epoxy:${versions.epoxy}"
    kapt "com.airbnb.android:epoxy-processor:${versions.epoxy}"

    /* ok-http */
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"

    /* moshi */
    implementation("com.squareup.moshi:moshi:${versions.moshi}")
    implementation("com.squareup.moshi:moshi-adapters:${versions.moshi}")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}")

    /* charts */
    implementation "com.github.PhilJay:MPAndroidChart:${versions.mpChart}"

    /* timber */
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    /* test */
    testImplementation 'org.json:json:20200518'
    testImplementation "io.mockk:mockk:${versions.mockk}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "androidx.test:core:${versions.androidxTestCore}"
    testImplementation "androidx.arch.core:core-testing:${versions.androidxArchCoreTesting}"
    testImplementation "androidx.test.ext:junit:${versions.androidxjunit}"
    testImplementation "androidx.test.ext:truth:${versions.androidxTruth}"
}

apply from: "$rootDir/gradle/googleservices.gradle"
